REM Oyun 1: Klasik Satran√ß
REM 8x8 tahtada iki oyunculu stratejik tahta oyunu

PRINT "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
PRINT "‚ïë            KLASƒ∞K SATRAN√á            ‚ïë"
PRINT "‚ïë           pdsXv11g v1.0              ‚ïë"
PRINT "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
PRINT

REM Global deƒüi≈ükenler
DIM board AS ARRAY
DIM current_player AS STRING
DIM game_over AS BOOLEAN
DIM white_king_pos AS ARRAY
DIM black_king_pos AS ARRAY
DIM move_history AS ARRAY
DIM captured_pieces AS ARRAY

REM Oyunu ba≈ülat
call initialize_chess()

DEF SUB initialize_chess()
    REM 8x8 tahtayƒ± olu≈ütur
    board = []
    
    REM Bo≈ü tahta olu≈ütur
    FOR i = 0 TO 7
        DIM row AS ARRAY
        row = []
        FOR j = 0 TO 7
            INSERT(row, ".")
        NEXT j
        INSERT(board, row)
    NEXT i
    
    REM Beyaz ta≈ülarƒ± yerle≈ütir (alt sƒ±ra)
    board(7)(0) = "‚ôñ"  ' Kale
    board(7)(1) = "‚ôò"  ' At
    board(7)(2) = "‚ôó"  ' Fil
    board(7)(3) = "‚ôï"  ' Vezir
    board(7)(4) = "‚ôî"  ' Kral
    board(7)(5) = "‚ôó"  ' Fil
    board(7)(6) = "‚ôò"  ' At
    board(7)(7) = "‚ôñ"  ' Kale
    
    REM Beyaz piyonlar
    FOR i = 0 TO 7
        board(6)(i) = "‚ôô"
    NEXT i
    
    REM Siyah ta≈ülarƒ± yerle≈ütir (√ºst sƒ±ra)
    board(0)(0) = "‚ôú"  ' Kale
    board(0)(1) = "‚ôû"  ' At
    board(0)(2) = "‚ôù"  ' Fil
    board(0)(3) = "‚ôõ"  ' Vezir
    board(0)(4) = "‚ôö"  ' Kral
    board(0)(5) = "‚ôù"  ' Fil
    board(0)(6) = "‚ôû"  ' At
    board(0)(7) = "‚ôú"  ' Kale
    
    REM Siyah piyonlar
    FOR i = 0 TO 7
        board(1)(i) = "‚ôü"
    NEXT i
    
    REM Kral pozisyonlarƒ±nƒ± kaydet
    white_king_pos = [7, 4]
    black_king_pos = [0, 4]
    
    REM Oyun ayarlarƒ±
    current_player = "beyaz"
    game_over = False
    move_history = []
    captured_pieces = []
    
    PRINT "Satran√ß tahtasƒ± hazƒ±rlandƒ±!"
    PRINT "Beyaz ta≈ülar alt sƒ±rada, siyah ta≈ülar √ºst sƒ±rada."
    PRINT
END SUB

DEF SUB show_board()
    PRINT
    PRINT "   a b c d e f g h"
    PRINT "  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê"
    
    FOR i = 0 TO 7
        PRINT (8 - i) + " ‚îÇ"
        FOR j = 0 TO 7
            PRINT board(i)(j) + " "
        NEXT j
        PRINT "‚îÇ"
    NEXT i
    
    PRINT "  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
    PRINT "   a b c d e f g h"
    PRINT
END SUB

DEF SUB show_game_status()
    PRINT "‚ïê‚ïê‚ïê OYUN DURUMU ‚ïê‚ïê‚ïê"
    PRINT "Sƒ±ra: " + current_player + " oyuncu"
    
    IF LEN(captured_pieces) > 0 THEN
        PRINT "Alƒ±nan ta≈ülar: "
        DIM white_captured AS STRING
        DIM black_captured AS STRING
        white_captured = ""
        black_captured = ""
        
        FOR i = 0 TO LEN(captured_pieces) - 1
            IF is_white_piece(captured_pieces(i)) THEN
                white_captured = white_captured + captured_pieces(i) + " "
            ELSE
                black_captured = black_captured + captured_pieces(i) + " "
            END IF
        NEXT i
        
        IF white_captured <> "" THEN PRINT "Beyaz: " + white_captured
        IF black_captured <> "" THEN PRINT "Siyah: " + black_captured
    END IF
    
    PRINT "Hamle sayƒ±sƒ±: " + STR$(LEN(move_history))
    PRINT
END SUB

DEF SUB play_chess()
    WHILE NOT game_over
        show_board()
        show_game_status()
        
        PRINT current_player + " oyuncunun sƒ±rasƒ±"
        PRINT "Hamle formatƒ±: e2-e4 (veya '√ßƒ±k' yazƒ±n)"
        
        INPUT "Hamleniz: ", move_input
        
        IF UPPER$(move_input) = "√áIK" OR UPPER$(move_input) = "EXIT" THEN
            game_over = True
            PRINT "Oyun sonlandƒ±rƒ±ldƒ±."
            EXIT SUB
        END IF
        
        IF UPPER$(move_input) = "YARDIM" THEN
            call show_help()
            CONTINUE
        END IF
        
        IF LEN(move_input) = 5 AND MID$(move_input, 3, 1) = "-" THEN
            DIM from_pos AS STRING
            DIM to_pos AS STRING
            from_pos = LEFT$(move_input, 2)
            to_pos = RIGHT$(move_input, 2)
            
            IF is_valid_move(from_pos, to_pos) THEN
                call make_move(from_pos, to_pos)
                
                REM ≈ûah kontrol√º
                IF is_in_check(current_player) THEN
                    PRINT "‚ö†Ô∏è " + current_player + " kral ≈üahta!"
                    
                    IF is_checkmate(current_player) THEN
                        show_board()
                        PRINT "üèÜ MAT! " + IIF$(current_player = "beyaz", "Siyah", "Beyaz") + " oyuncu kazandƒ±!"
                        game_over = True
                        EXIT SUB
                    END IF
                END IF
                
                REM Sƒ±ra deƒüi≈ütir
                IF current_player = "beyaz" THEN
                    current_player = "siyah"
                ELSE
                    current_player = "beyaz"
                END IF
            ELSE
                PRINT "‚ùå Ge√ßersiz hamle! Tekrar deneyin."
            END IF
        ELSE
            PRINT "‚ùå Ge√ßersiz format! √ñrnek: e2-e4"
        END IF
        
        PRINT
    WEND
END SUB

DEF FUNCTION is_valid_move(from_pos AS STRING, to_pos AS STRING) AS BOOLEAN
    REM Pozisyonlarƒ± koordinatlara √ßevir
    DIM from_coords AS ARRAY
    DIM to_coords AS ARRAY
    
    from_coords = pos_to_coords(from_pos)
    to_coords = pos_to_coords(to_pos)
    
    REM Ge√ßerli koordinat kontrol√º
    IF from_coords(0) = -1 OR to_coords(0) = -1 THEN
        RETURN False
    END IF
    
    DIM from_row AS INTEGER
    DIM from_col AS INTEGER
    DIM to_row AS INTEGER
    DIM to_col AS INTEGER
    
    from_row = from_coords(0)
    from_col = from_coords(1)
    to_row = to_coords(0)
    to_col = to_coords(1)
    
    REM Kaynak karede ta≈ü var mƒ±?
    DIM piece AS STRING
    piece = board(from_row)(from_col)
    
    IF piece = "." THEN
        RETURN False
    END IF
    
    REM Oyuncunun kendi ta≈üƒ± mƒ±?
    IF current_player = "beyaz" AND NOT is_white_piece(piece) THEN
        RETURN False
    END IF
    
    IF current_player = "siyah" AND is_white_piece(piece) THEN
        RETURN False
    END IF
    
    REM Hedef kareye kendi ta≈üƒ±nƒ± alamaz
    DIM target_piece AS STRING
    target_piece = board(to_row)(to_col)
    
    IF target_piece <> "." THEN
        IF current_player = "beyaz" AND is_white_piece(target_piece) THEN
            RETURN False
        END IF
        
        IF current_player = "siyah" AND NOT is_white_piece(target_piece) THEN
            RETURN False
        END IF
    END IF
    
    REM Ta≈üƒ±n hareket kurallarƒ±nƒ± kontrol et
    RETURN is_legal_piece_move(piece, from_row, from_col, to_row, to_col)
END FUNCTION

DEF FUNCTION pos_to_coords(pos AS STRING) AS ARRAY
    IF LEN(pos) <> 2 THEN
        RETURN [-1, -1]
    END IF
    
    DIM col_char AS STRING
    DIM row_char AS STRING
    col_char = LEFT$(pos, 1)
    row_char = RIGHT$(pos, 1)
    
    DIM col AS INTEGER
    DIM row AS INTEGER
    
    SELECT CASE UPPER$(col_char)
        CASE "A": col = 0
        CASE "B": col = 1
        CASE "C": col = 2
        CASE "D": col = 3
        CASE "E": col = 4
        CASE "F": col = 5
        CASE "G": col = 6
        CASE "H": col = 7
        CASE ELSE: RETURN [-1, -1]
    END SELECT
    
    row = VAL(row_char)
    IF row < 1 OR row > 8 THEN
        RETURN [-1, -1]
    END IF
    
    row = 8 - row  ' Tahtayƒ± ters √ßevir
    
    RETURN [row, col]
END FUNCTION

DEF FUNCTION is_white_piece(piece AS STRING) AS BOOLEAN
    RETURN piece = "‚ôî" OR piece = "‚ôï" OR piece = "‚ôñ" OR piece = "‚ôó" OR piece = "‚ôò" OR piece = "‚ôô"
END FUNCTION

DEF FUNCTION is_legal_piece_move(piece AS STRING, from_row AS INTEGER, from_col AS INTEGER, to_row AS INTEGER, to_col AS INTEGER) AS BOOLEAN
    DIM row_diff AS INTEGER
    DIM col_diff AS INTEGER
    row_diff = to_row - from_row
    col_diff = to_col - from_col
    
    SELECT CASE piece
        CASE "‚ôô", "‚ôü"  ' Piyon
            RETURN is_valid_pawn_move(piece, from_row, from_col, to_row, to_col)
            
        CASE "‚ôñ", "‚ôú"  ' Kale
            RETURN is_valid_rook_move(from_row, from_col, to_row, to_col)
            
        CASE "‚ôó", "‚ôù"  ' Fil
            RETURN is_valid_bishop_move(from_row, from_col, to_row, to_col)
            
        CASE "‚ôò", "‚ôû"  ' At
            RETURN is_valid_knight_move(row_diff, col_diff)
            
        CASE "‚ôï", "‚ôõ"  ' Vezir
            RETURN is_valid_queen_move(from_row, from_col, to_row, to_col)
            
        CASE "‚ôî", "‚ôö"  ' Kral
            RETURN is_valid_king_move(row_diff, col_diff)
    END SELECT
    
    RETURN False
END FUNCTION

DEF FUNCTION is_valid_pawn_move(piece AS STRING, from_row AS INTEGER, from_col AS INTEGER, to_row AS INTEGER, to_col AS INTEGER) AS BOOLEAN
    DIM row_diff AS INTEGER
    DIM col_diff AS INTEGER
    row_diff = to_row - from_row
    col_diff = to_col - from_col
    
    DIM is_white AS BOOLEAN
    is_white = is_white_piece(piece)
    
    REM Beyaz piyonlar yukarƒ±, siyah piyonlar a≈üaƒüƒ± hareket eder
    DIM direction AS INTEGER
    IF is_white THEN
        direction = -1  ' Yukarƒ±
    ELSE
        direction = 1   ' A≈üaƒüƒ±
    END IF
    
    REM D√ºz ileri hareket
    IF col_diff = 0 THEN
        IF row_diff = direction THEN
            RETURN board(to_row)(to_col) = "."  ' Bo≈ü kare
        END IF
        
        REM ƒ∞lk hamlede 2 kare
        IF (is_white AND from_row = 6) OR (NOT is_white AND from_row = 1) THEN
            IF row_diff = 2 * direction THEN
                RETURN board(to_row)(to_col) = "."
            END IF
        END IF
    END IF
    
    REM √áapraz alma
    IF ABS(col_diff) = 1 AND row_diff = direction THEN
        DIM target AS STRING
        target = board(to_row)(to_col)
        RETURN target <> "." AND is_white_piece(target) <> is_white
    END IF
    
    RETURN False
END FUNCTION

DEF FUNCTION is_valid_rook_move(from_row AS INTEGER, from_col AS INTEGER, to_row AS INTEGER, to_col AS INTEGER) AS BOOLEAN
    REM Kale d√ºz √ßizgide hareket eder
    IF from_row <> to_row AND from_col <> to_col THEN
        RETURN False
    END IF
    
    RETURN is_path_clear(from_row, from_col, to_row, to_col)
END FUNCTION

DEF FUNCTION is_valid_bishop_move(from_row AS INTEGER, from_col AS INTEGER, to_row AS INTEGER, to_col AS INTEGER) AS BOOLEAN
    REM Fil √ßapraz hareket eder
    DIM row_diff AS INTEGER
    DIM col_diff AS INTEGER
    row_diff = ABS(to_row - from_row)
    col_diff = ABS(to_col - from_col)
    
    IF row_diff <> col_diff THEN
        RETURN False
    END IF
    
    RETURN is_path_clear(from_row, from_col, to_row, to_col)
END FUNCTION

DEF FUNCTION is_valid_knight_move(row_diff AS INTEGER, col_diff AS INTEGER) AS BOOLEAN
    REM At L ≈üeklinde hareket eder
    RETURN (ABS(row_diff) = 2 AND ABS(col_diff) = 1) OR (ABS(row_diff) = 1 AND ABS(col_diff) = 2)
END FUNCTION

DEF FUNCTION is_valid_queen_move(from_row AS INTEGER, from_col AS INTEGER, to_row AS INTEGER, to_col AS INTEGER) AS BOOLEAN
    REM Vezir kale + fil gibi hareket eder
    RETURN is_valid_rook_move(from_row, from_col, to_row, to_col) OR is_valid_bishop_move(from_row, from_col, to_row, to_col)
END FUNCTION

DEF FUNCTION is_valid_king_move(row_diff AS INTEGER, col_diff AS INTEGER) AS BOOLEAN
    REM Kral her y√∂ne 1 kare hareket eder
    RETURN ABS(row_diff) <= 1 AND ABS(col_diff) <= 1 AND (row_diff <> 0 OR col_diff <> 0)
END FUNCTION

DEF FUNCTION is_path_clear(from_row AS INTEGER, from_col AS INTEGER, to_row AS INTEGER, to_col AS INTEGER) AS BOOLEAN
    DIM row_step AS INTEGER
    DIM col_step AS INTEGER
    
    IF to_row > from_row THEN row_step = 1
    ELSEIF to_row < from_row THEN row_step = -1
    ELSE row_step = 0
    
    IF to_col > from_col THEN col_step = 1
    ELSEIF to_col < from_col THEN col_step = -1
    ELSE col_step = 0
    
    DIM check_row AS INTEGER
    DIM check_col AS INTEGER
    check_row = from_row + row_step
    check_col = from_col + col_step
    
    WHILE check_row <> to_row OR check_col <> to_col
        IF board(check_row)(check_col) <> "." THEN
            RETURN False
        END IF
        
        check_row = check_row + row_step
        check_col = check_col + col_step
    WEND
    
    RETURN True
END FUNCTION

DEF SUB make_move(from_pos AS STRING, to_pos AS STRING)
    DIM from_coords AS ARRAY
    DIM to_coords AS ARRAY
    
    from_coords = pos_to_coords(from_pos)
    to_coords = pos_to_coords(to_pos)
    
    DIM from_row AS INTEGER
    DIM from_col AS INTEGER
    DIM to_row AS INTEGER
    DIM to_col AS INTEGER
    
    from_row = from_coords(0)
    from_col = from_coords(1)
    to_row = to_coords(0)
    to_col = to_coords(1)
    
    DIM moving_piece AS STRING
    DIM captured_piece AS STRING
    
    moving_piece = board(from_row)(from_col)
    captured_piece = board(to_row)(to_col)
    
    REM Alƒ±nan ta≈üƒ± kaydet
    IF captured_piece <> "." THEN
        INSERT(captured_pieces, captured_piece)
        PRINT "üéØ " + captured_piece + " ta≈üƒ± alƒ±ndƒ±!"
    END IF
    
    REM Hamleyi yap
    board(to_row)(to_col) = moving_piece
    board(from_row)(from_col) = "."
    
    REM Kral pozisyonunu g√ºncelle
    IF moving_piece = "‚ôî" THEN
        white_king_pos = [to_row, to_col]
    ELSEIF moving_piece = "‚ôö" THEN
        black_king_pos = [to_row, to_col]
    END IF
    
    REM Hamleyi kaydet
    DIM move_record AS STRING
    move_record = from_pos + "-" + to_pos + " (" + moving_piece + ")"
    INSERT(move_history, move_record)
    
    PRINT "‚úÖ Hamle: " + from_pos + " ‚Üí " + to_pos
END SUB

DEF FUNCTION is_in_check(player AS STRING) AS BOOLEAN
    DIM king_pos AS ARRAY
    IF player = "beyaz" THEN
        king_pos = white_king_pos
    ELSE
        king_pos = black_king_pos
    END IF
    
    DIM king_row AS INTEGER
    DIM king_col AS INTEGER
    king_row = king_pos(0)
    king_col = king_pos(1)
    
    REM D√º≈üman ta≈ülarƒ±nƒ±n kralƒ± tehdit edip etmediƒüini kontrol et
    FOR i = 0 TO 7
        FOR j = 0 TO 7
            DIM piece AS STRING
            piece = board(i)(j)
            
            IF piece <> "." THEN
                DIM piece_belongs_to_opponent AS BOOLEAN
                IF player = "beyaz" THEN
                    piece_belongs_to_opponent = NOT is_white_piece(piece)
                ELSE
                    piece_belongs_to_opponent = is_white_piece(piece)
                END IF
                
                IF piece_belongs_to_opponent THEN
                    IF is_legal_piece_move(piece, i, j, king_row, king_col) THEN
                        RETURN True
                    END IF
                END IF
            END IF
        NEXT j
    NEXT i
    
    RETURN False
END FUNCTION

DEF FUNCTION is_checkmate(player AS STRING) AS BOOLEAN
    REM Basitle≈ütirilmi≈ü mat kontrol√º
    REM Ger√ßek satran√ßta daha karma≈üƒ±k olacaktƒ±r
    
    REM ≈ûu anki basit implementasyon sadece ≈üah durumunu kontrol eder
    RETURN is_in_check(player)
END FUNCTION

DEF SUB show_help()
    PRINT
    PRINT "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê SATRAN√á YARDIM ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    PRINT "HAMLE FORMATI:"
    PRINT "  ‚Ä¢ e2-e4 (e2'den e4'e hareket et)"
    PRINT "  ‚Ä¢ Kolon: a-h, Sƒ±ra: 1-8"
    PRINT
    PRINT "TA≈û HAREKETLERƒ∞:"
    PRINT "  ‚ôô‚ôü Piyon: ƒ∞leri 1 kare, √ßapraz alƒ±r, ilk hamlede 2 kare"
    PRINT "  ‚ôñ‚ôú Kale: D√ºz √ßizgide sƒ±nƒ±rsƒ±z"
    PRINT "  ‚ôó‚ôù Fil: √áapraz sƒ±nƒ±rsƒ±z"
    PRINT "  ‚ôò‚ôû At: L ≈üeklinde (2+1 kare)"
    PRINT "  ‚ôï‚ôõ Vezir: Her y√∂ne sƒ±nƒ±rsƒ±z"
    PRINT "  ‚ôî‚ôö Kral: Her y√∂ne 1 kare"
    PRINT
    PRINT "KOMUTLAR:"
    PRINT "  ‚Ä¢ '√ßƒ±k' - Oyunu bitir"
    PRINT "  ‚Ä¢ 'yardƒ±m' - Bu yardƒ±mƒ± g√∂ster"
    PRINT "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê=="
    PRINT
END SUB

DEF SUB show_main_menu()
    PRINT "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê SATRAN√á OYUNU ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    PRINT "1. Yeni Oyun Ba≈ülat"
    PRINT "2. Hamle Ge√ßmi≈üini G√∂ster"
    PRINT "3. Oyun Kurallarƒ±"
    PRINT "4. √áƒ±kƒ±≈ü"
    PRINT "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
END SUB

REM Ana oyun d√∂ng√ºs√º
DIM main_running AS BOOLEAN
main_running = True

WHILE main_running
    show_main_menu()
    
    DIM menu_choice AS INTEGER
    INPUT "Se√ßiminiz: ", menu_choice
    
    SELECT CASE menu_choice
        CASE 1
            call initialize_chess()
            call play_chess()
            
        CASE 2
            IF LEN(move_history) = 0 THEN
                PRINT "Hen√ºz hamle yapƒ±lmadƒ±."
            ELSE
                PRINT
                PRINT "HAMLE GE√áMƒ∞≈ûƒ∞:"
                FOR i = 0 TO LEN(move_history) - 1
                    PRINT STR$(i + 1) + ". " + move_history(i)
                NEXT i
            END IF
            
        CASE 3
            call show_help()
            
        CASE 4
            main_running = False
            PRINT "Oyun kapatƒ±lƒ±yor... G√ºle g√ºle!"
            
        CASE ELSE
            PRINT "Ge√ßersiz se√ßim!"
    END SELECT
    
    IF main_running THEN
        PRINT
        INPUT "Devam etmek i√ßin Enter tu≈üuna basƒ±n...", dummy
        PRINT
    END IF
WEND
